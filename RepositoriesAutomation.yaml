# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  BASE_TMP_DIR: { sh: echo $(echo $TMPDIR)gh-automations }
  REPOSITORIES_DIR: "{{.BASE_TMP_DIR}}/repositories"
  DEFAULT_PR_MESSAGE: "chore: reconcile repository"
  PR_LIST_FILE: "{{.USER_WORKING_DIR}}/pr-list.txt"
  PR_LIST_AUTO_APPROVE: "{{.USER_WORKING_DIR}}/pr-approve.txt"
  PR_LIST_MERGE: "{{.USER_WORKING_DIR}}/pr-merge.txt"
  BRANCH_NAME_PREFIX: "repo-reconciliation"

tasks:
  reconcile-repository:
    desc: executes the given script in the context of the given repository
    run: once
    deps: [requirements]
    requires: { vars: [REPO_NAME, SCRIPTS_LIST, REPOSITORIES_DIR] }
    vars:
      TIMESTAMP: { sh: date +%s }
      REPO_DIR: "{{.REPOSITORIES_DIR}}/{{.REPO_NAME}}"
      BRANCH_NAME: "{{.BRANCH_NAME_PREFIX}}-{{.TIMESTAMP}}"
    cmds:
      - mkdir -p {{.REPO_DIR}}

      - defer: rm -rf {{.REPO_DIR}}

      - task: checkout
        vars:
          REPOSITORY_DIR: "{{.REPO_DIR}}"
          REPO_NAME: "{{.REPO_NAME}}"

      - task: delete-old-branches
        vars:
          REPOSITORY_DIR: "{{.REPO_DIR}}"
          BRANCH_PREFIX: "{{.BRANCH_NAME_PREFIX}}"

      - task: create-branch
        vars:
          REPOSITORY_DIR: "{{.REPO_DIR}}"
          BRANCH_NAME: "{{.BRANCH_NAME}}"

      - for: { var: SCRIPTS_LIST, split: "," }
        task: run-script-for-repository
        vars:
          REPOSITORY_DIR: "{{.REPO_DIR}}"
          SCRIPT_PATH: "{{.ITEM}}"

      - task: open-pr
        vars:
          REPOSITORY_DIR: "{{.REPO_DIR}}"
          BRANCH_NAME: "{{.BRANCH_NAME}}"

  ##############################
  # start of internal tasks
  run-script-for-repository:
    internal: true
    requires: { vars: [REPOSITORY_DIR, SCRIPT_PATH] }
    run: always
    desc: runs the given script in the context of the given repository
    dir: "/{{.REPOSITORY_DIR}}"
    cmd: bash {{.SCRIPT_PATH}}
    preconditions:
      - sh: "[ -f {{.SCRIPT_PATH}} ]"
        msg: ✗ directory '{{.SCRIPT_PATH}}' does not exist."
      - sh: "[[ '{{.SCRIPT_PATH}}' = /* ]]"
        msg: ✗ directory '{{.SCRIPT_PATH}}' must be an absolute path."

  create-branch:
    internal: true
    requires: { vars: [REPOSITORY_DIR, BRANCH_NAME] }
    run: always
    desc: creates a branch on the repository on the given directory
    dir: "/{{.REPOSITORY_DIR}}"
    cmd: git checkout -b {{.BRANCH_NAME}}
    status:
      - git show-ref --quiet refs/heads/{{.BRANCH_NAME}}

  open-pr:
    internal: true
    requires: { vars: [REPOSITORY_DIR, BRANCH_NAME, GH_TOKEN] }
    run: always
    dir: "/{{.REPOSITORY_DIR}}"
    vars:
      COMMIT_MESSAGE: "chore: changes autogenerated by reconciliation script"
      PR_TITLE: "chore: {{.DEFAULT_PR_MESSAGE}}"
    env:
      GH_TOKEN: "{{.GH_TOKEN}}"
    cmd: |
      git add --all
      git commit -m "{{.COMMIT_MESSAGE}}"
      git push origin {{.BRANCH_NAME}}
      pullRequestLink=$(gh pr create --base main --head "{{.BRANCH_NAME}}" --title "{{.PR_TITLE}}" --body "PR autogenerated.")
      echo "$pullRequestLink" >> {{.PR_LIST_FILE}}
      echo "gh pr review $pullRequestLink --approve" >> {{.PR_LIST_AUTO_APPROVE}}
      echo "gh pr merge $pullRequestLink --admin --squash" >> {{.PR_LIST_MERGE}}
    status:
      - test -z "$(git status --porcelain)" # if there are no changes to commit

  checkout:
    internal: true
    requires: { vars: [REPO_NAME, REPOSITORY_DIR] }
    run: always
    dir: "/{{.REPOSITORY_DIR}}"
    prefix: "checkout @ {{.REPO_NAME}}"
    cmds:
      - rm -rf {{.REPOSITORY_DIR}}/*
      - git clone git@github.com:{{.REPO_NAME}}.git {{.REPOSITORY_DIR}}
      - git fetch --all

  delete-old-branches:
    silent: true
    internal: true
    requires: { vars: [REPOSITORY_DIR, BRANCH_PREFIX] }
    run: always
    prefix: "cleanup old branches"
    dir: "/{{.REPOSITORY_DIR}}"
    cmds:
      - |
        BRANCHES=$(git branch -r | grep "origin/{{.BRANCH_PREFIX}}" | sed 's/origin\///')

        if [ -z "$BRANCHES" ]; then
          echo "no branches found with prefix '{{.BRANCH_PREFIX}}'"
        else
          for BRANCH in $BRANCHES; do
            echo "deleting branch '$BRANCH'"
            git push origin --delete "$BRANCH"
          done
        fi

  requirements:
    run: once
    preconditions:
      - sh: gh --version
        msg: "GH cli is not installed. Please run 'brew install gh' or follow the README instructions"
      - sh: test -n "{{.GH_TOKEN}}"
        msg: "GITHUB_PAT environment variables is not set. Please set it before running this task"
